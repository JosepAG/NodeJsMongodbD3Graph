{{#each errors}}
<div class="alert alert-danger alert-dismissible fade show" role="alert">
    <strong>Por favor, revise los datos introducidos</strong> {{text}}
    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
        <span aria-hidden="true">&times;</span>
    </button>
</div>
{{/each }}

<!--  <div class="alert alert-warning alert-dismissible fade show" role="alert">
      <strong>Holy guacamole!</strong> You should check in on some of those fields below.
      <button type="button" class="close" data-dismiss="alert" aria-label="Close">
          <span aria-hidden="true">&times;</span>
      </button>
  </div>
  -->





<body>

    <!--<script <script src="https://d3js.org/d3.v4.js"></script>-->
    <!--<script src="https://d3js.org/d3.v5.min.js"></script>-->

    <script src="http://d3js.org/d3.v4.min.js"></script>
 
    <script src="http://cdn.jsdelivr.net/g/filesaver.js"></script>
    <!----->
    <!-- <script>
         $("form").submit(function (e) {
             e.preventDefault(); // Prevents the page from refreshing
             var $this = $(this); // `this` refers to the current form element
             $.post(
                 $this.attr("action"), // Gets the URL to sent the post to
                 $this.serialize(), // Serializes form data in standard format
                 function (data) { /** code to handle response **/ },
                 "json" // The format the response should be in
             );
         });

    </script>-->

    <form method="post" action="/notes?_method=put" style="width:100%; background-color:#CBF4FA; border-radius: 15px">
        <br />

        <div id:"caja" style="text-align:center;">
            <!--<input type="text" name="texto">-->



            <input type="checkbox" style="width: 1em; height: 1em; vertical-align: middle;" name="SW_in_Avg"><span style="color:blue"> SW_in_Avg</span>
            <input type="checkbox" style="width: 1em; height: 1em; vertical-align: middle;" name="SW_out_Avg"><span style="color:green"> SW_out_Avg</span>
            <input type="checkbox" style="width: 1em; height: 1em; vertical-align: middle;" name="LW_in_Avg"><span style="color:#999900"> LW_in_Avg</span>
            <input type="checkbox" style="width: 1em; height: 1em; vertical-align: middle;" name="LW_out_Avg"><span style="color:red"> LW_out_Avg</span>
            <input type="checkbox" style="width: 1em; height: 1em; vertical-align: middle;" name="Rnet_Avg"><span style="color:purple"> Rnet_Avg</span>
        </div>

        <div></div>
        <div id:"tiempo" style="text-align:center; ">

            <span> Start: </span><input type="date" name="date1" min="{{Fecha_Start}}" max="{{Fecha_End}}" id="start">
            <span> End: </span><input type="date" name="date2" min="{{Fecha_Start}}" max="{{Fecha_End}}" id="end">

        </div>
        <button style="width:100%; background-color:lightsteelblue;  border-color: #6DBEC9; border-radius: 15px">Create Graph and File</button>
    </form>

    <div id="grafica">

    </div>
    <div>
        <button id="save-btn" style="width:100%;border-color: #6DBEC9; background-color:lightsteelblue; border-radius: 15px">Download Data in JSON format</button>
    </div>
    </div>

    <script>

       /* console.log({{{ LWinAvg }}});
        console.log({{{ SWoutAvg }}});
        console.log({{{ SWinAvg }}});
        console.log({{{ LWoutAvg }}});
        console.log({{{ RnetAvg }}});

        var data = {{{ resultado }}};
        var data_print = {{{ resultado }}};
        console.log(data);

;

        */
        /////////////////////////////Conversión para intrudicir en grafica

        const Array_Checkbox = []
        Array_graph= '-'

        if (JSON.stringify({{{ LWinAvg }}}) == '"on"') {

            $('input[name="LW_in_Avg"]').prop("checked", true);
            Array_Checkbox.push("LW_in_Avg");
            Array_graph = Array_graph + ' LW_in_Avg '

        }

        if (JSON.stringify({{{ LWoutAvg }}}) == '"on"') {
            $('input[name="LW_out_Avg"]').prop("checked", true);
            Array_Checkbox.push("LW_out_Avg");
            Array_graph = Array_graph + ' LW_out_Avg '

        }

        if (JSON.stringify({{{ RnetAvg }}}) == '"on"') {
            $('input[name="Rnet_Avg"]').prop("checked", true);
            Array_Checkbox.push("RnetAvg");
            Array_graph = Array_graph + ' Rnet_Avg '

        }

        if (JSON.stringify({{{ SWinAvg }}}) == '"on"') {
            $('input[name="SW_in_Avg"]').prop("checked", true);
             Array_Checkbox.push("SW_in_Avg");
            Array_graph = Array_graph + ' SW_in_Avg '

        }

        if (JSON.stringify({{{ SWoutAvg }}}) == '"on"') {
            $('input[name="SW_out_Avg"]').prop("checked", true);
            Array_Checkbox.push("SW_out_Avg");
            Array_graph = Array_graph + ' SW_out_Avg '

        }
        console.log(Array_Checkbox);
        console.log(Array_graph);


        //Array_graph = JSON.parse(Array_graph);












      var data = {{{ resultado }}};
        var data_print = {{{ resultado }}};




    var margin = {top: 70, right: 350, bottom: 100, left: 70},
            width = 1210 - margin.left - margin.right,
            height = 400 - margin.top - margin.bottom;





    var svg = d3.select("#grafica")
             .append("svg")
             .attr("width", width + margin.left + margin.right)
             .attr("height", height + margin.top + margin.bottom)
             .append("g")
             .attr("transform",
                 "translate(" + margin.left + "," + margin.top + ")")

               // Define the div for the tooltip
     var div = d3.select("body").append("div")
             .attr("class", "tooltip")
            .style("opacity", 0);


    //var parseDate = d3.timeParse("%Y-%m-%d %H:%M:%S");
        var parseDate = d3.timeParse("%d/%m/%Y %H:%M");


        //Leyenda izquierda
        svg.append("text")
        .attr("x", (width / 2))             
        .attr("y", (height+margin.bottom/2))
        .attr("transform", "translate(-325 ,520) rotate(270)")
        .attr("text-anchor", "middle")  
        .style("font-size", "15px")  
        .text("LW_in_Avg LW_out_Avg")
            .style("color", "#008B8B");

        //Leyenda derecha
        svg.append("text")
        .attr("x", (width / 2))             
        .attr("y", (height+margin.bottom/2))
        .attr("transform", "translate(1110 ,-280) rotate(90)")
        .attr("text-anchor", "middle")  
        .style("font-size", "15px")  
        .text("SW_in_Avg SW_out_Avg Rnet_Avg")
        .style("color","#008B8B");




        ///Titulo
       svg.append("text")
        .attr("x", (width / 2))
        .attr("y", 10 - (margin.top / 2))
        .attr("text-anchor", "middle")
        .style("font-size", "25px")
        .text("Radiation  " )
        .style("color","#008B8B");

        console.log(JSON.stringify({{{ d1_Conv }}}));
        console.log(({{{ Fecha_End }}}));

        //Leyenda
        svg.append("text").attr("x", (-170+width / 2))
            .attr("y", (-10 + height + margin.bottom / 2))
            .text("Date from " + (JSON.stringify({{{ d1_Conv }}}))+ " to "+(JSON.stringify({{{ d2_Conv }}}))).style("font-size", "20px")
            .attr("alignment-baseline","middle")
            .style("stroke", "black")
            .attr("stroke-width","0.7")
            .attr("opacity", 1)


        data.forEach(function (d) {
        //Array_graph
        d.date = parseDate(d.date);
        });
         data.forEach(function(d) {
        //Array_graph
         d.LW_in_Avg = Number(d.LW_in_Avg);
         });

          data.forEach(function(d) {
              //Array_graph
              d.LW_out_Avg = Number(d.LW_out_Avg);
          });

         data.forEach(function(d) {
              //Array_graph
              d.SW_out_Avg = Number(d.SW_out_Avg);
         });

         data.forEach(function(d) {
              //Array_graph
              d.SW_in_Avg = Number(d.SW_in_Avg);
         });
         data.forEach(function(d) {
              //Array_graph
              d.Rnet_Avg = Number(d.Rnet_Avg);
         });





        var x = d3.scaleTime()
            .domain(d3.extent(data, function(d) { return d.date; }))
            .range([0, width]);

        var xAxis =  svg.append("g")
                 .attr("transform", "translate(0," + height + ")")
                  .call(d3.axisBottom(x));


        if ((JSON.stringify({{{ LWoutAvg }}}) == '"on"') || (JSON.stringify({{{ LWinAvg }}}) == '"on"')) {

            var y = d3.scaleLinear()
                .domain([250, 500])
                .range([height, 0]);
            var yAxis = svg.append("g")
                .attr("class", "axisRed")
                .call(d3.axisLeft(y));

            var z = d3.scaleLinear()
                .domain([250, 500])
                .range([height, 0]);

            // Add a clipPath: everything out of this area won't be drawn.
            var clip = svg.append("defs").append("svg:clipPath")
                .attr("id", "clip")
                .append("svg:rect")
                .attr("width", width)
                .attr("height", height)
                .attr("x", 0)
                .attr("y", 0)
                .style("fill", "none");


        }



        if ((JSON.stringify({{{ SWinAvg }}}) == '"on"') || (JSON.stringify({{{ RnetAvg }}}) == '"on"') || (JSON.stringify({{{ SWoutAvg }}}) == '"on"')) {
            var w = d3.scaleLinear()
                .domain([-100, 800])
                .range([height, 0]);
            var wAxis = svg.append("g")
                .attr("class", "axisBlue")
                .attr("transform", "translate( " + width + ", 0 )")
                .call(d3.axisRight(w));



            var q = d3.scaleLinear()
                .domain([-100, 800])
                .range([height, 0]);

            var t = d3.scaleLinear()
                .domain([-100, 800])
                .range([height, 0]);

            var clip2 = svg.append("defs").append("svg:clipPath") //PRUEBA
        .attr("id", "clip2")
        .append("svg:rect")
        .attr("width", width )
        .attr("height", height )
        .attr("x", 0)
        .attr("w", 0);

            function make_y_gridlines() {
                return d3.axisLeft(w)
                .ticks(6)
            }


        }

         function make_x_gridlines() {
            return d3.axisBottom(x)
                .ticks(11)
                 }

                // gridlines in y axis function
             function make_y_gridlines() {
                 return d3.axisLeft(y)
             .ticks(6)
             }






           // add the X gridlines
      svg.append("g")
      .attr("class", "grid")
      .attr("opacity", 0.1)
      .attr("transform", "translate(0," + height + ")")
      .call(make_x_gridlines()
          .tickSize(-height)
          .tickFormat("")
      )

 // add the Y gridlines
      svg.append("g")
      .attr("class", "grid")
      .attr("opacity", 0.1)
      .call(make_y_gridlines()
          .tickSize(-width)
          .tickFormat("")
      )





    // Add the valueline path.
        if (JSON.stringify({{{ LWinAvg }}}) == '"on"') {
            var line = svg.append('g')
      	        .attr("clip-path", "url(#clip)")
              	 // Add the line
         line.append("path")
             .datum(data)
            .attr("class", "line")  // I add the class line to be able to modify this line later on.
            .attr("fill", "none")
            .attr("stroke", "yellow")
             .attr("opacity", 1)
            .attr("stroke-width", 1.5)
            .attr("d", d3.line()
                 .x(function(d) { return x(d.date) })
                 .y(function(d) { return y(d.LW_in_Avg) })
        )


        }
        if (JSON.stringify({{{ LWoutAvg }}}) == '"on"') {
               var line2 = svg.append('g')
      	            .attr("clip-path", "url(#clip)")
              	 // Add the line
                 line2.append("path")
                     .datum(data)
                     .attr("class", "line")  // I add the class line to be able to modify this line later on.
                      .attr("fill", "none")
                     .attr("stroke", "red")
                     .attr("opacity", 1)
                     .attr("stroke-width", 1.5)
                     .attr("d", d3.line()
                 .x(function(d) { return x(d.date) })
                 .y(function(d) { return z(d.LW_out_Avg) })
        )
        }
        if (JSON.stringify({{{ SWoutAvg }}}) == '"on"') {
            var line3 = svg.append('g')
      	            .attr("clip-path", "url(#clip2)")
              	 // Add the line
                 line3.append("path")
                     .datum(data)
                     .attr("class", "line")  // I add the class line to be able to modify this line later on.
                      .attr("fill", "none")
                     .attr("stroke", "green")
                     .attr("opacity", 1)
                     .attr("stroke-width", 1.5)
                     .attr("d", d3.line()
                 .x(function(d) { return x(d.date) })
                 .y(function(d) { return q(d.SW_out_Avg) })
        )
        }
        if (JSON.stringify({{{ SWinAvg }}}) == '"on"') {
            var line4 = svg.append('g')
      	            .attr("clip-path", "url(#clip2)")
              	 // Add the line
                 line4.append("path")
                     .datum(data)
                     .attr("class", "line")  // I add the class line to be able to modify this line later on.
                      .attr("fill", "none")
                     .attr("stroke", "blue")
                     .attr("opacity", 1)
                     .attr("stroke-width", 1.5)
                     .attr("d", d3.line()
                 .x(function(d) { return x(d.date) })
                 .y(function(d) { return t(d.SW_in_Avg) })
        )
        }
        if (JSON.stringify({{{ RnetAvg }}}) == '"on"') {
            var line5 = svg.append('g')
      	            .attr("clip-path", "url(#clip2)")
              	 // Add the line
                 line5.append("path")
                     .datum(data)
                     .attr("class", "line")  // I add the class line to be able to modify this line later on.
                      .attr("fill", "none")
                     .attr("stroke", "purple")
                     .attr("opacity", 1)
                     .attr("stroke-width", 1.5)
                     .attr("d", d3.line()
                 .x(function(d) { return x(d.date) })
                 .y(function(d) { return w(d.Rnet_Avg) })
        )
        }





    // Add the X Axis
    svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
            .call(xAxis);


    // Add the Y Axis
    svg.append("g")
        .attr("class", "y axis")
            .call(yAxis);

    //  Add the W Axis
    svg.append("g")
        .attr("class", "y axis")
        .call(wAxis);








    </script>


    <script>


        $("#save-btn").click(function () {
            var ablob = new Blob([JSON.stringify(data_print, null, 2)], { type: 'application/json' });

            saveAs(ablob, "data.txt");
        });




    </script>
</body>
